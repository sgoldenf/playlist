// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/playlist_service.proto

package playlist_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error)
	GetSong(ctx context.Context, in *ReadSongRequest, opts ...grpc.CallOption) (*ReadSongResponse, error)
	GetSongs(ctx context.Context, in *ReadSongsRequest, opts ...grpc.CallOption) (*ReadSongsResponse, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Next(ctx context.Context, in *NextSongRequest, opts ...grpc.CallOption) (*NextSongResponse, error)
	Prev(ctx context.Context, in *PrevSongRequest, opts ...grpc.CallOption) (*PrevSongResponse, error)
	Player(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (PlaylistService_PlayerClient, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error) {
	out := new(CreateSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/CreateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetSong(ctx context.Context, in *ReadSongRequest, opts ...grpc.CallOption) (*ReadSongResponse, error) {
	out := new(ReadSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetSongs(ctx context.Context, in *ReadSongsRequest, opts ...grpc.CallOption) (*ReadSongsResponse, error) {
	out := new(ReadSongsResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/GetSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Next(ctx context.Context, in *NextSongRequest, opts ...grpc.CallOption) (*NextSongResponse, error) {
	out := new(NextSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Prev(ctx context.Context, in *PrevSongRequest, opts ...grpc.CallOption) (*PrevSongResponse, error) {
	out := new(PrevSongResponse)
	err := c.cc.Invoke(ctx, "/playlist_service.PlaylistService/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Player(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (PlaylistService_PlayerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[0], "/playlist_service.PlaylistService/Player", opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServicePlayerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaylistService_PlayerClient interface {
	Recv() (*PlayerInfo, error)
	grpc.ClientStream
}

type playlistServicePlayerClient struct {
	grpc.ClientStream
}

func (x *playlistServicePlayerClient) Recv() (*PlayerInfo, error) {
	m := new(PlayerInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error)
	GetSong(context.Context, *ReadSongRequest) (*ReadSongResponse, error)
	GetSongs(context.Context, *ReadSongsRequest) (*ReadSongsResponse, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Next(context.Context, *NextSongRequest) (*NextSongResponse, error)
	Prev(context.Context, *PrevSongRequest) (*PrevSongResponse, error)
	Player(*ConnectRequest, PlaylistService_PlayerServer) error
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedPlaylistServiceServer) GetSong(context.Context, *ReadSongRequest) (*ReadSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedPlaylistServiceServer) GetSongs(context.Context, *ReadSongsRequest) (*ReadSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedPlaylistServiceServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedPlaylistServiceServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlaylistServiceServer) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlaylistServiceServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlaylistServiceServer) Next(context.Context, *NextSongRequest) (*NextSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPlaylistServiceServer) Prev(context.Context, *PrevSongRequest) (*PrevSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPlaylistServiceServer) Player(*ConnectRequest, PlaylistService_PlayerServer) error {
	return status.Errorf(codes.Unimplemented, "method Player not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/CreateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreateSong(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetSong(ctx, req.(*ReadSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/GetSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetSongs(ctx, req.(*ReadSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Next(ctx, req.(*NextSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist_service.PlaylistService/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Prev(ctx, req.(*PrevSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Player_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaylistServiceServer).Player(m, &playlistServicePlayerServer{stream})
}

type PlaylistService_PlayerServer interface {
	Send(*PlayerInfo) error
	grpc.ServerStream
}

type playlistServicePlayerServer struct {
	grpc.ServerStream
}

func (x *playlistServicePlayerServer) Send(m *PlayerInfo) error {
	return x.ServerStream.SendMsg(m)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist_service.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSong",
			Handler:    _PlaylistService_CreateSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _PlaylistService_GetSong_Handler,
		},
		{
			MethodName: "GetSongs",
			Handler:    _PlaylistService_GetSongs_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _PlaylistService_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _PlaylistService_DeleteSong_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _PlaylistService_Play_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _PlaylistService_Pause_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _PlaylistService_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _PlaylistService_Prev_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Player",
			Handler:       _PlaylistService_Player_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/playlist_service.proto",
}
